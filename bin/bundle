#!/usr/bin/env perl
use strict;
use warnings;
use Carp;
use Pod::Usage qw< pod2usage >;
use Getopt::Long qw< :config gnu_getopt >;
use English qw< -no_match_vars >;
use File::Find qw< find >;
use FindBin ();
use File::Basename qw< dirname >;
my $VERSION = '0.0.1';

my %config = (
   keep => 0, # strip by default
   output => '-',
);
GetOptions(
   \%config,
   qw<
     usage! help! man! version!
     keep|keep-pod|k!
     libs|libs-from|L=s
     output|o=s
     >
) or pod2usage(-verbose => 99, -sections => 'USAGE');
pod2usage(message => "$0 $VERSION", -verbose => 99, -sections => ' ')
  if $config{version};
pod2usage(-verbose => 99, -sections => 'USAGE') if $config{usage};
pod2usage(-verbose => 99, -sections => 'USAGE|EXAMPLES|OPTIONS')
  if $config{help};
pod2usage(-verbose => 2) if $config{man};

# Script implementation here
my $ofh = output_fh($config{output});
for my $lib (read_libs($config{libs}), @ARGV) {
   copy_lib(seek_lib($lib), $ofh, \%config);
}

sub seek_lib {
   my ($lib) = @_;
   $lib .= '.pm' unless $lib =~ m{\.pm \z}mxs;
   my $start_dir = $ENV{BUNDLE_LIB_ROOT} // dirname($FindBin::Bin);
   my $retval;
   eval {
      find(
         sub {
            return if -d $File::Find::name;
            return unless $_ eq $lib;
            $retval = $File::Find::name;
            die 'get out of here!';
         },
         $start_dir
      );
   };
   return $retval;
}

sub read_libs {
   my ($filename) = @_;
   return unless defined $filename;
   open my $fh, '<', $filename or die "open('$filename'): $OS_ERROR";
   map { split m{\s+}mxs } <$fh>;
}

sub copy_lib {
   my ($filename, $ofh, $config) = @_;
   open my $ifh, '<', $filename or die "open('$filename'): $OS_ERROR";

   print {$ofh} "\n", '#' x 76, "\n";

   my $state = $config->{keep} ? 'go' : 'seek';
   my $last_empty;
   while (<$ifh>) {
      if (($state eq 'seek') && m{\A =pod \s*\z}mxs) {
         $state = 'skip';
         next;
      }
      if ($state eq 'skip') {
         $state = 'go' if m{\A =cut \s*\z}mxs;
         next;
      }
      my $is_empty = m{\A \s* \z}mxs;
      next if $last_empty && $is_empty;
      $last_empty = $is_empty;
      print {$ofh} $_;
   }
}


sub output_fh {
   my $filename = shift || '-';
   my $fh;
   if ($filename eq '-') {
      $fh = \*STDOUT;
   }
   else {
      open $fh, '>', $filename or die "open('$filename'): $OS_ERROR";
   }
   binmode $fh, ':raw';
   return $fh;
}

__END__

=head1 NAME

bundle - [ una breve descrizione del programma ]

=head1 VERSION

Ask the version number to the script itself, calling:

   shell$ bundle --version


=head1 USAGE

   bundle [--usage] [--help] [--man] [--version]

   bundle

=head1 EXAMPLES

   shell$ bundle

=for l'autore, da riempire:
   Qualche breve esempio con codice che mostri l'utilizzo più comune.
   Questa sezione sarà quella probabilmente più letta, perché molti
   utenti si annoiano a leggere tutta la documentazione, per cui
   è meglio essere il più educativi ed esplicativi possibile.


=head1 DESCRIPTION

=for l'autore, da riempire:
   Fornite una descrizione completa del modulo e delle sue caratteristiche.
   Aiutatevi a strutturare il testo con le sottosezioni (=head2, =head3)
   se necessario.


=head1 OPTIONS

=for l'autore, da riempire:
   Una descrizione di tutte le opzioni possibili nella chiamata allo script

=over

=item --help

print a somewhat more verbose help, showing usage, this description of
the options and some examples from the synopsis.

=item --man

print out the full documentation for the script.

=item --usage

print a concise usage line and exit.

=item --version

print the version of the script.

=back

=head1 DIAGNOSTICS

=for l'autore, da riempire:
   Elencate qualunque singolo errore o messaggio di avvertimento che
   lo script può generare, anche quelli che non "accadranno mai".
   Includete anche una spiegazione completa di ciascuno di questi
   problemi, una o più possibili cause e qualunque rimedio
   suggerito.


=over

=item C<< Error message here, perhaps with %s placeholders >>

[Descrizione di un errore]

=item C<< Another error message here >>

[Descrizione di un errore]

[E così via...]

=back


=head1 CONFIGURATION AND ENVIRONMENT

=for l'autore, da riempire:
   Una spiegazione completa di qualunque sistema di configurazione
   utilizzato dallo script, inclusi i nomi e le posizioni dei file di
   configurazione, il significato di ciascuna variabile di ambiente
   utilizzata e proprietà che può essere impostata. Queste descrizioni
   devono anche includere dettagli su eventuali linguaggi di configurazione
   utilizzati.
  
bundle requires no configuration files or environment variables.


=head1 DEPENDENCIES

=for l'autore, da riempire:
   Una lista di tutti i moduli su cui si basa questo script,
   incluse eventuali restrizioni sulle relative versioni, ed una
   indicazione se il modulo in questione è parte della distribuzione
   standard di Perl, parte della distribuzione del modulo o se
   deve essere installato separatamente.

None.


=head1 BUGS AND LIMITATIONS

=for l'autore, da riempire:
   Una lista di tutti i problemi conosciuti relativi al modulo,
   insime a qualche indicazione sul fatto che tali problemi siano
   plausibilmente risolti in una versione successiva. Includete anche
   una lista delle restrizioni sulle funzionalità fornite dal
   modulo: tipi di dati che non si è in grado di gestire, problematiche
   relative all'efficienza e le circostanze nelle quali queste possono
   sorgere, limitazioni pratiche sugli insiemi dei dati, casi
   particolari che non sono (ancora) gestiti, e così via.

No bugs have been reported.

Please report any bugs or feature requests through http://rt.cpan.org/


=head1 AUTHOR

Flavio Poletti C<polettix@cpan.org>


=head1 LICENCE AND COPYRIGHT

Copyright (c) 2017, Flavio Poletti C<polettix@cpan.org>.

This module is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
