#!/usr/bin/env perl
# vim: ts=3 sts=3 sw=3 et ai nowrap :
use 5.024001;

# GLOBAL variables (overridable in testing)
our $SHARED_LOG_TYPES = { # any category is printed by default
   exception => 1,
   read  => 0,
   intro => 1,
   intro_outcome => 0,
   turn => 0,
   turn_outcome => 0,
};
our $SHARED_FH = \*STDIN;
our $TESTING = $ENV{TESTING} // 0;

BEGIN {
   my %mf = (
      'EMo.pm' => <<'END', # --- MODULE
package EMo;
# use Mo qw< build default builder coerce is required option chain exporter import >;
#   The following line of code was produced from the previous line by
#   Mo::Inline version 0.40
no warnings;my$M=__PACKAGE__.'::';*{$M.Object::new}=sub{my$c=shift;my$s=bless{@_},$c;my%n=%{$c.'::'.':E'};map{$s->{$_}=$n{$_}->()if!exists$s->{$_}}keys%n;$s};*{$M.import}=sub{import warnings;$^H|=1538;my($P,%e,%o)=caller.'::';shift;eval"no Mo::$_",&{$M.$_.::e}($P,\%e,\%o,\@_)for@_;return if$e{M};%e=(extends,sub{eval"no $_[0]()";@{$P.ISA}=$_[0]},has,sub{my$n=shift;my$m=sub{$#_?$_[0]{$n}=$_[1]:$_[0]{$n}};@_=(default,@_)if!($#_%2);$m=$o{$_}->($m,$n,@_)for sort keys%o;*{$P.$n}=$m},%e,);*{$P.$_}=$e{$_}for keys%e;@{$P.ISA}=$M.Object};*{$M.'build::e'}=sub{my($P,$e)=@_;$e->{new}=sub{$c=shift;my$s=&{$M.Object::new}($c,@_);my@B;do{@B=($c.::BUILD,@B)}while($c)=@{$c.::ISA};exists&$_&&&$_($s)for@B;$s}};*{$M.'default::e'}=sub{my($P,$e,$o)=@_;$o->{default}=sub{my($m,$n,%a)=@_;exists$a{default}or return$m;my($d,$r)=$a{default};my$g='HASH'eq($r=ref$d)?sub{+{%$d}}:'ARRAY'eq$r?sub{[@$d]}:'CODE'eq$r?$d:sub{$d};my$i=exists$a{lazy}?$a{lazy}:!${$P.':N'};$i or ${$P.':E'}{$n}=$g and return$m;sub{$#_?$m->(@_):!exists$_[0]{$n}?$_[0]{$n}=$g->(@_):$m->(@_)}}};*{$M.'builder::e'}=sub{my($P,$e,$o)=@_;$o->{builder}=sub{my($m,$n,%a)=@_;my$b=$a{builder}or return$m;my$i=exists$a{lazy}?$a{lazy}:!${$P.':N'};$i or ${$P.':E'}{$n}=\&{$P.$b}and return$m;sub{$#_?$m->(@_):!exists$_[0]{$n}?$_[0]{$n}=$_[0]->$b:$m->(@_)}}};*{$M.'coerce::e'}=sub{my($P,$e,$o)=@_;$o->{coerce}=sub{my($m,$n,%a)=@_;$a{coerce}or return$m;sub{$#_?$m->($_[0],$a{coerce}->($_[1])):$m->(@_)}};my$C=$e->{new}||*{$M.Object::new}{CODE};$e->{new}=sub{my$s=$C->(@_);$s->$_($s->{$_})for keys%$s;$s}};*{$M.'is::e'}=sub{my($P,$e,$o)=@_;$o->{is}=sub{my($m,$n,%a)=@_;$a{is}or return$m;sub{$#_&&$a{is}eq'ro'&&caller ne'Mo::coerce'?die$n.' is ro':$m->(@_)}}};*{$M.'required::e'}=sub{my($P,$e,$o)=@_;$o->{required}=sub{my($m,$n,%a)=@_;if($a{required}){my$C=*{$P."new"}{CODE}||*{$M.Object::new}{CODE};no warnings 'redefine';*{$P."new"}=sub{my$s=$C->(@_);my%a=@_[1..$#_];die$n." required"if!exists$a{$n};$s}}$m}};*{$M.'option::e'}=sub{my($P,$e,$o)=@_;$o->{option}=sub{my($m,$n,%a)=@_;$a{option}or return$m;my$n2=$n;*{$P."read_$n2"}=sub{$_[0]->{$n2}};sub{$#_?$m->(@_):$m->(@_,1);$_[0]}}};*{$M.'chain::e'}=sub{my($P,$e,$o)=@_;$o->{chain}=sub{my($m,$n,%a)=@_;$a{chain}or return$m;sub{$#_?($m->(@_),return$_[0]):$m->(@_)}}};*{$M.'exporter::e'}=sub{my($P)=@_;if(@{$M.EXPORT}){*{$P.$_}=\&{$M.$_}for@{$M.EXPORT}}};my$i=\&import;*{$M.import}=sub{(@_==2 and not$_[1])?pop@_:@_==1?push@_,grep!/import/,@f:();goto&$i};@f=qw[build default builder coerce is required option chain exporter import];use strict;use warnings;
1;
END
   );
   unshift @INC, sub { return \$mf{$_[1]} if exists $mf{$_[1]} }
}

package Base;
use strict;
use Storable ();
use EMo 'default';
use experimental qw< signatures postderef >;
no warnings qw< experimental::signatures experimental::postderef >;

has fh        => (default => $SHARED_FH);
has log_types => (default => $SHARED_LOG_TYPES);
has hash_remove => (default => [qw< fh log_types hash_remove >]);

sub clone ($src) {
   my $dest = ref($src)->new($src->hashref->%*);
   $dest->$_($src->$_) for $src->hash_remove->@*;
   return $dest;
}

sub hashref ($self)  {
   my %hash = $self->%*;
   delete @hash{$self->hash_remove->@*};
   return Storable::dclone(\%hash);
}

sub log_die { $_[0]->log(@_); die "bailing out\n" }
sub log_set { %{$_[0]{log_types}} = (%{$_[0]{log_types}}, @_); $_[0] }

sub log ($self, $type, @items) {
   my $lts = $self->log_types;
   return if exists($lts->{$type}) && (!$lts->{$type});
   my $text = join "\n", map {
      my $ref = ref $_;
      if (! $ref) { $_ }
      elsif ($ref eq 'CODE') { $_->($type, $self) }
      else {
         state $dumper = eval 'use Data::Dump qw< pp >; \\&pp ' ||
            do { require Data::Dumper; \&Data::Dumper::Dumper };
         $dumper->($_);
      }
   } @items;
   $text =~ s{\s*\z}{}mxs;
   $text =~ s{^}{[$type] }gmxs;
   say {*STDERR} $text;
   return $self;
}

sub readline ($self) {
   defined(my $line = CORE::readline($self->fh)) or return;
   $self->log(read => $line);
   return $line;
}

sub readchomplines ($self, $n) {
   return [map {chomp(my $l = $self->readline); $l} 1 .. $n];
}

sub set_input ($self, $input) {
   return unless defined $input;
   $self->fh(
      (ref($input) eq 'GLOB') ? $input
      : do { open my $fh, '<', $input or die "open(): $!"; $fh }
   );
   return $self;
}

package Bot;
use strict;
use EMo qw< default >;

extends 'Base';

has turn   => (default => 0);

sub run {
   my ($self, %args) = @_;
   $self = ($args{class} || $self)->new(%args) unless ref $self;

   if ($self->can('parse_intro')) {
      $self->log(intro => 'parsing');
      $self->parse_intro;
   }

   if ($self->can('run_intro')) {
      $self->log(intro => 'running');
      my @outcome = $self->run_intro;
      $self->log(intro_outcome => \@outcome);
      $self->log(intro => 'done');
      say for @outcome;
   }

   $self->{turn} = 0;
   select STDOUT; $|++; # disable output buffering
   while ('necessary') {
      my $turn = ++$self->{turn};
      $self->log(turn => "$turn parsing");
      $self->parse_turn;
      $self->log(turn => "$turn running");
      my @outcome = $self->run_turn;
      $self->log(turn_outcome => \@outcome);
      $self->log(turn => "$turn done");
      say for @outcome;
   }
}

package BestItem;
use strict;
use experimental qw< signatures postderef >;
no warnings qw< experimental::signatures experimental::postderef >;

sub collector (%a) {
   my ($op, $eval, $bv, @bs) = ($a{op} // '>', $a{evaluator} // undef);
   state $tmpl = <<'END';
      sub ($item = undef, $value = undef) {
         return ($bv, @bs) unless @_;
         $value = $eval->($item) if !defined($value) && defined($eval);
         if (!defined($bv) || $value __OPERATOR__ $bv) {
            ($bv, @bs) = ($value, $item);
         }
         elsif ($value == $bv) {
            push @bs, $item;
         }
         return;
      };
END
   return eval($tmpl =~ s{__OPERATOR__}{$op}gmxsr) || die $@;
}

########################################################################
## SPECIFIC BOT STUFF BELOW HERE
########################################################################

package MyRound;
use strict;
use warnings;
use EMo ''; # build default builder coerce is required option chain
use experimental qw< signatures postderef >;
no warnings qw< experimental::signatures experimental::postderef >;

extends 'Base'; # logging, reading

has $_ for qw< foo bar >; # your round members

# EXAMPLE round reading
sub read ($package, $n1, $n2) { # FIXME
   my $self = (ref($package) || $package)->new; # default log & read

   my $n = 0 + $self->readline;
   $self->parse_foo($self->readchomplines($n1 + $n));
   $self->parse_bar($self->readchomplines($n2));
   # ...

   return $self;
}

package MyBot;
use strict;
use warnings;
use EMo ''; # build default builder coerce is required option chain
use experimental qw< signatures postderef >;
no warnings qw< experimental::signatures experimental::postderef >;

extends 'Bot';

has $_ for qw< round n1 n2 >;

sub parse_intro ($self) {
   $self->n1(0 + $self->readline); # example FIXME
   $self->n2(0 + $self->readline); # example FIXME
   return $self;
}

sub run_intro ($self) {
   $self->log(intro => "TESTING: $TESTING");
   return; # return is printed out
}

sub parse_turn ($self) {
   my $r = MyRound->new(fh => $self->fh, log_types => $self->log_types);
   $self->round($r->read($self->n1, $self->n2)); # FIXME
   return $self;
}

sub run_turn ($self) {
   my @answer_lines = ('hello', 'world');
   return @answer_lines; # return is printed out
}

MyBot->run unless caller;
